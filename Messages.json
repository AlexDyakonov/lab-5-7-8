{
  "en": {
    "message": {
      "input_name": "Insert name: ",
      "input_soundtrack": "Insert soundtrack name: ",
      "input_realhero": "Is it real hero? (true/t/y, default: false) ",
      "input_has_toothpick": "Does it has toothpick? (true/t/y, default: false) ",
      "input_car_name": "Insert car name. If it is not exist insert \"null\" / or empty line.",
      "input_car_cool": "Does it cool? (true/false/t/f):",
      "input_coordinate_x": "Insert coordinate X: ",
      "input_coordinate_y": "Insert coordinate Y (>-897): ",
      "input_mood": "Choose mood: 1 = SORROW, 2 = GLOOM, 3 = APATHY, 4 = CALM, 5 = RAGE (default = RAGE)",
      "input_weapon": "Choose weapon: 1 = AXE, 2 = SHOTGUN, 3 = BAT, 0 = null. (default = shotgun)",
      "input_impact_speed": "Insert ImpactSpeed (ex: 4.61): ",
      "input_language": "Type RU/EN to choose app language: ",
      "info_about_dataset": "DataBase class: %class%; \n Created: %date%; \n Size: %size%;",
      "count_by_mood": "With %mood% found %num% elements."
    },
    "error": {
      "same_id": "Found two HumanBeing with same %id%. First will be loaded.",
      "no_args": "Command should contains no args.",
      "one_arg": "Command contains one argument.",
      "user_not_added": "HumanBeing wasn't added.",
      "db_file_not_readable": "File is not readable. Use other to start the app.",
      "db_file_not_found": "File not found. Use other path to start the app.",
      "file_not_writable": "File is not writable. Use other.",
      "invalid_file_name": "Invalid filepath name.",
      "file_is_directory": "Path leads the directory. Use other.",
      "no_args_main": "You must enter the name of the file with the database when starting the program.",
      "id_more_than_zero": "ID must be more than 0.",
      "request_not_validated": "Request was not validate successfully.",
      "mood_not_exist": "This mood does not exist.",
      "bool_null": "Null met while boolean reading. It is not null parameter.",
      "impact_speed_null": "Null met while impact speed reading. It is not null parameter.",
      "number_error": "Insert number.",
      "recursion_met": "Recursion encountered. Script execution stopped.",
      "not_done": "Failed to execute.",
      "id_not_correct": "The HumanBeing id is incorrect. The entry will be ignored.",
      "invalid_name": "The name must not be empty and must be greater than 0 characters.",
      "user_not_deleted": "HumanBeing wasn't deleted."
    },
    "warning": {
      "default_language": "Can not recognize input language. Set default language: RU.",
      "db_file_not_writable": "File is not writable! The functionality of the program is limited (impossible to save). Run the program with a different file to get full functionality.",
      "command_not_found": "The command you entered was not recognized.",
      "user_not_found": "HumanBeing with id - %id% not found",
      "incorrect_line": "The entry is invalid and will be ignored.",
      "y_more_than": "Y must be greater than -897."
    },
    "success": {
      "user_added": "HumanBeing with id - %id% was added.",
      "output_db": "%num% elements was showed.",
      "done": "Success!"
    },
    "command_description": {
      "help": "display info about all commands.",
      "info": "display information about the collection.",
      "show": "display all HumanBeing.",
      "add": "add new HumanBeing.",
      "add_if_min": "add a new element to the collection if its ImpactSpeed value is greater than the value of the largest element in this collection.",
      "add_if_max": "add a new element to the collection if its ImpactSpeed value is less than that of the smallest element in this collection.",
      "update": "update the value of the collection element whose id is equal to the given one.",
      "remove_by_id": "removing HumanBeing with given id.",
      "clear": "clear collection.",
      "save": "save collection to file.",
      "history": "display the last 15 commands without arguments",
      "exit": "end program (without saving).",
      "execute_script": "read and execute a script from the specified file.",
      "max_by_impact_speed": "display any object from the collection whose impactSpeed field value is the maximum.",
      "count_by_mood": "display the number of elements whose mood field value is equal to the specified value.",
      "print_ascending": "display the elements of the collection in ascending order.",
      "language": "choose language program."
    },
    "log_info": {
      "start_saving": "Saving data base is starting.",
      "load_starting": "Data base is loading.",
      "set_ready": "HashSet created.",
      "humanbeing_added_to_set": "HumanBeing *%hb%* added to set.",
      "data_base_loaded": "Successfully loaded %size% items.",
      "data_base_saved": "Successfully saved %size% items.",
      "save_error": "Saving error into *%file%*.",
      "same_id": "Found two HumanBeing with same %id%. First will be loaded.",
      "no_args": "Command should contains no args.",
      "no_args_main": "You must enter the name of the file with the database when starting the program.",
      "command_not_found": "The command you entered was not recognized.",
      "command_init_start": "Initializing commands starting.",
      "command_init_finish": "Initializing commands finished.",
      "user_deleted": "HumanBeing with id - %id% was deleted.",
      "user_not_deleted": "HumanBeing wasn't deleted.",
      "update_starting": "HumanBeing with id - %id% is updating.",
      "update_finished": "HumanBeing with id - %id% is updated.",
      "info_got": "Info about set got.",
      "info_shown": "Info was shown.",
      "cleared": "%num% elements was deleted.",
      "command_executing": "Command *%command%* is executing.",
      "command_executed": "Command *%command%* executed.",
      "invoker_init_start": "Initializing invoker starting.",
      "invoker_init_finish": "Initializing invoker finished.",
      "elements_showed": "%num% elements was shown.",
      "hm_init_finish": "HistoryManager initialized.",
      "command_to_hm": "Command was added to history manager.",
      "script_manager_init_start": "Initializing script manager starting.",
      "script_manager_init_finish": "Initializing script manager finished.",
      "script_added_to_sm": "Script *%script%* is added to script list.",
      "executing_file": "Executing file *%file%*.",
      "cleared_scripts": "Script history cleared.",
      "new_script": "Met new script. Executing.",
      "dir_exist": "Directory already exists.",
      "par_dir_fail": "Failed to create parent directory.",
      "dir_created": "Directory created successfully.",
      "dir_failed": "Failed to create directory.",
      "language_start": "Started language selecting.",
      "language_finish": "Ended language selecting.",
      "prop_provider_loading": "Properties Provider is loading file.",
      "prop_provider_finish": "Properties Provider loaded file.",
      "prop_url_got": "URL was successfuly got.",
      "prop_username_got": "Username was successfuly got.",
      "prop_pass_got": "Password was successfuly got.",
      "connection_created": "Connection was successfully created",
      "connection_not_created": "Connection was not created."
    }
  },
  "ru": {
    "message": {
      "input_name": "Введите имя: ",
      "input_soundtrack": "Введите название саундтрека: ",
      "input_realhero": "Это реальный герой? (true/t/y, default: false) ",
      "input_has_toothpick": "У него есть зубочистка? (true/t/y, default: false) ",
      "input_car_name": "Введите название машины. Если ее нет, то введите null/пустую строку",
      "input_car_cool": "Введите крутая ли она? (true/false/t/f):",
      "input_coordinate_x": "Введите координату X: ",
      "input_coordinate_y": "Введите координату Y (больше -897): ",
      "input_mood": "Выберите настроение: 1 = SORROW, 2 = GLOOM, 3 = APATHY, 4 = CALM, 5 = RAGE (default = RAGE)",
      "input_weapon": "Выберите оружие: 1 = AXE, 2 = SHOTGUN, 3 = BAT, 0 = null. (default = shotgun)",
      "input_impact_speed": "Введите ImpactSpeed (ex: 4.61): ",
      "input_language": "Введите RU/EN для выбора языка системы: ",
      "info_about_dataset": "Класс бд: %class%; \n Создано: %date%; \n Размер: %size%;",
      "count_by_mood": "С %mood% найдено %num% элементов."
    },
    "error": {
      "same_id": "Найдено два пользователя с одинаковым id. Загружен первый из них.",
      "no_args": "Команда не должна содержать аргументы.",
      "one_arg": "Команда содержит один аргумент.",
      "user_not_added": "Не удалось добавить пользователя",
      "db_file_not_readable": "Файл недоступен для чтения. Чтобы использовать другой запустите программу еще раз.",
      "db_file_not_found": "Файл не найден. Чтобы использовать другой запустите программу еще раз.",
      "file_not_writable": "Файл недоступен для записи. Выберите другой.",
      "invalid_file_name": "Недопустимое имя файла. Запустите программу еще раз ииспользуя допустимый путь.",
      "file_is_directory": "Путь ведет к директории. Укажите другой файл, чтобы запустить программу.",
      "no_args_main": "Необходимо ввести название файла с базой данных при запуске программы.",
      "id_more_than_zero": "ID не может быть 0 или меньше 0",
      "request_not_validated": "Валидация реквеста не увенчалась успехом",
      "mood_not_exist": "Такого mood не существует.",
      "bool_null": "Встречен null при чтения строки для boolean поля. Это поле не может быть null.",
      "impact_speed_null": "Встречен null при чтения строки для поля impact speed. Это поле не может быть null.",
      "number_error": "Введите числовые значения.",
      "recursion_met": "Встречена рекурсия. Выполнение скрипта остановлено.",
      "not_done": "Не удалось выполнить.",
      "id_not_correct": "Id HumanBeing некорректно. Запись будет проигнорирована",
      "invalid_name": "Имя не должно быть пустым и должно быть больше 0 символа",
      "user_not_deleted": "HumanBeing не был удален."
    },
    "warning": {
      "default_language": "Не могу распознать язык, который вы выбрали. Установлен язык по умолчанию: RU.",
      "db_file_not_writable": "Файл недоступен к изменением! Функционал программы ограничен(невозможно сохранять). Запустите программу, указав другой файл, чтобы получить полный функционал.",
      "command_not_found": "Введенная команда не распознана.",
      "user_not_found": "Пользователь с id - %id% не найден",
      "incorrect_line": "Запись некорректна и будет проигнорирована.",
      "y_more_than": "Y должен быть больше -897."
    },
    "success": {
      "user_added": "Пользователь с %id% успешно добавлен.",
      "output_db": "Было успешно выведено %num% элементов.",
      "done": "Успешно!"
    },
    "command_description": {
      "help": "вывести справку о всех командах.",
      "info": "вывести информацию о коллекции.",
      "show": "вывести всех сущностей HumanBeing.",
      "add": "добавляет новую сущность HumanBeing.",
      "add_if_min": "добавить новый элемент в коллекцию, если его значение ImpactSpeed превышает значение наибольшего элемента этой коллекции.",
      "add_if_max": "добавить новый элемент в коллекцию, если его значение ImpactSpeed меньше, чем у наименьшего элемента этой коллекции.",
      "update": "обновить значение элемента коллекции, id которого равен заданному.",
      "remove_by_id": "удалить элемент из коллекции по его id.",
      "clear": "очистить коллекцию.",
      "save": "сохранить коллекцию в файл.",
      "history": "вывести последние 15 команд без аргументов.",
      "exit": "завершить программу (без сохранения в файл).",
      "execute_script": "считать и исполнить скрипт из указанного файла.",
      "max_by_impact_speed": "вывести любой объект из коллекции, значение поля impactSpeed которого является максимальным.",
      "count_by_mood": "вывести количество элементов, значение поля mood которых равно заданному.",
      "print_ascending": "вывести элементы коллекции в порядке возрастания.",
      "language": "выбор языка."
    }
  }
}