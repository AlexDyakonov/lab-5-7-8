@startuml
class server.model.Coordinates {
- Integer x
- Double y
+ String toString()
+ {static} Coordinates fromString(String)
+ Integer getX()
+ void setX(Integer)
+ Double getY()
+ void setY(Double)
}
class server.services.builders.NameBuilder {
+ {static} String getName(BufferedReader)
+ {static} String nameBuilder(BufferedReader,BufferedReader,String,BuilderType)
}
class server.services.builders.HumanBeingRequestDTOBuilder {
+ {static} HumanBeingRequestDTO build(BufferedReader,BufferedReader,BuilderType)
}
class App {
+ {static} void main(String[])
}
interface server.dao.HumanDao {
~ HumanBeingResponseDTO getHumanById(Long)
~ List<HumanBeingResponseDTO> getAllHuman()
~ Long createHuman(HumanBeingRequestDTO)
~ void deleteHumanById(Long)
~ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
~ String info()
~ void clear()
~ void save(String)
~ HumanBeingResponseDTO max_by_impact_speed()
~ List<HumanBeingResponseDTO> print_ascending()
~ Long addIfMax(HumanBeingRequestDTO)
~ Long addIfMin(HumanBeingRequestDTO)
~ int countByMood(Mood)
~ boolean isImpactSpeedMax(HumanBeingRequestDTO)
~ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
class server.services.builders.CoordinatesBuilder {
+ {static} Coordinates getCoordinates(BufferedReader)
+ {static} Coordinates getCoordinatesFromFile(BufferedReader)
+ {static} Coordinates buildCoordinates(BufferedReader,BufferedReader,BuilderType)
}
class server.exception.ApplicationException {
}
class client.ui.ConsoleUI {
- String file
- CommandExecutor executor
+ void start()
}
class server.model.dto.HumanBeingRequestDTO {
- String name
- Coordinates coordinates
- Boolean realHero
- Boolean hasToothpick
- Float impactSpeed
- String soundtrackName
- WeaponType weaponType
- Mood mood
- Car car
+ String getName()
+ void setName(String)
+ Coordinates getCoordinates()
+ void setCoordinates(Coordinates)
+ Boolean getRealHero()
+ void setRealHero(Boolean)
+ Boolean getHasToothpick()
+ void setHasToothpick(Boolean)
+ Float getImpactSpeed()
+ void setImpactSpeed(Float)
+ String getSoundtrackName()
+ void setSoundtrackName(String)
+ WeaponType getWeaponType()
+ void setWeaponType(WeaponType)
+ Mood getMood()
+ void setMood(Mood)
+ Car getCar()
+ void setCar(Car)
+ String toString()
}
class server.model.Car {
- String name
- boolean cool
+ String toStringLine()
+ {static} Car fromString(String)
+ String getName()
+ void setName(String)
+ boolean isCool()
+ void setCool(boolean)
+ String toString()
}
class server.exception.FileException {
}
class server.exception.ValidationException {
}
enum server.model.WeaponType {
+  AXE
+  SHOTGUN
+  BAT
}
class server.mapper.HumanBeingMapper {
+ {static} HumanBeingResponseDTO fromModelToResponse(HumanBeingModel)
+ {static} HumanBeingModel fromRequestToModel(HumanBeingRequestDTO)
+ {static} HumanBeingRequestDTO fromStringToRequest(String)
+ {static} HumanBeingModel fromStringToHumanBeingModel(String)
+ {static} String fromHumanBeingModelToStringLine(HumanBeingModel)
}
class server.services.builders.BooleanBuilder {
+ {static} boolean getBool(BufferedReader)
+ {static} boolean boolBuilder(BufferedReader,BufferedReader,String,BuilderType)
}
class server.services.builders.CarBuilder {
+ {static} Car getCar(BufferedReader)
+ {static} Car getCarFromFile(BufferedReader)
+ {static} Car carBuilder(BufferedReader,BufferedReader,BuilderType)
}
class server.validation.Parser {
+ {static} boolean stringToBoolean(String)
+ {static} ZonedDateTime stringToDateTime(String)
+ {static} Mood stringToMood(String)
+ {static} WeaponType stringToWeaponType(String)
}
enum server.services.BuilderType {
+  CMD
+  FILE
}
class server.services.builders.MoodSetter {
+ {static} Mood getMood(BufferedReader)
+ {static} Mood setMood(BufferedReader,BufferedReader,BuilderType)
}
class client.ui.MenuConstants {
+ {static} String HELLO
+ {static} String HELP
+ {static} int HISTORY_SIZE
}
class server.services.builders.ImpactSpeedBuilder {
+ {static} float getImpactSpeed(BufferedReader)
+ {static} float impactSpeedBuilder(BufferedReader,BufferedReader,BuilderType)
}
class server.validation.Validation {
+ {static} boolean validateRequestDTO(HumanBeingRequestDTO)
- {static} boolean validateName(String)
- {static} boolean validateCoordinate(Coordinates)
+ {static} void validateFileExist(File)
+ {static} void validateFileRead(File)
+ {static} void validateFileWrite(File)
+ {static} boolean validateUserName(String)
+ {static} boolean validateCarName(String)
+ {static} boolean validateCoordinates(Coordinates)
+ {static} boolean validateBoolean(Boolean)
+ {static} boolean validateImpactSpeed(Float)
+ {static} boolean validateSoundtrackName(String)
+ {static} boolean validateMood(Mood)
+ {static} boolean validateId(String)
+ {static} void validate(T,Function<T,Boolean>,String)
}
class server.exception.CommandException {
}
enum server.model.Mood {
+  SORROW
+  GLOOM
+  APATHY
+  CALM
+  RAGE
}
class server.services.HistoryManager {
- List<String> historyListOfCommands
- int historySizeLimit
+ void addCommandToHistory(String)
+ List<String> getHistoryListOfCommands()
+ void clearHistoryListOfCommands()
}
class server.model.HumanBeingModel {
- Long id
- String name
- Coordinates coordinates
- java.time.ZonedDateTime creationDate
- Boolean realHero
- Boolean hasToothpick
- Float impactSpeed
- String soundtrackName
- WeaponType weaponType
- Mood mood
- Car car
+ Long getId()
+ void setId(Long)
+ String getName()
+ void setName(String)
+ Coordinates getCoordinates()
+ void setCoordinates(Coordinates)
+ ZonedDateTime getCreationDate()
+ void setCreationDate(ZonedDateTime)
+ Boolean getRealHero()
+ void setRealHero(Boolean)
+ Boolean getHasToothpick()
+ void setHasToothpick(Boolean)
+ Float getImpactSpeed()
+ void setImpactSpeed(Float)
+ String getSoundtrackName()
+ void setSoundtrackName(String)
+ WeaponType getWeaponType()
+ void setWeaponType(WeaponType)
+ Mood getMood()
+ void setMood(Mood)
+ Car getCar()
+ void setCar(Car)
}
class server.db.DataBaseProvider {
- Set<HumanBeingModel> dataBase
- LocalDateTime creationDate
- Long generateNextId()
+ Long addHumanToDatabase(HumanBeingModel)
- {static} Set<HumanBeingModel> loadDataBase(String)
+ void save(String)
+ Set<HumanBeingModel> getDataBase()
+ LocalDateTime getCreationDate()
}
class server.model.dto.HumanBeingResponseDTO {
- Long id
- String name
- Coordinates coordinates
- java.time.ZonedDateTime creationDate
- Boolean realHero
- Boolean hasToothpick
- Float impactSpeed
- String soundtrackName
- WeaponType weaponType
- Mood mood
- Car car
+ Long getId()
+ void setId(Long)
+ String getName()
+ void setName(String)
+ Coordinates getCoordinates()
+ void setCoordinates(Coordinates)
+ ZonedDateTime getCreationDate()
+ void setCreationDate(ZonedDateTime)
+ Boolean getRealHero()
+ void setRealHero(Boolean)
+ Boolean getHasToothpick()
+ void setHasToothpick(Boolean)
+ Float getImpactSpeed()
+ void setImpactSpeed(Float)
+ String getSoundtrackName()
+ void setSoundtrackName(String)
+ WeaponType getWeaponType()
+ void setWeaponType(WeaponType)
+ Mood getMood()
+ void setMood(Mood)
+ Car getCar()
+ void setCar(Car)
+ String toString()
}
class server.dao.HumanDaoImpl {
- DataBaseProvider source
+ HumanBeingResponseDTO getHumanById(Long)
+ List<HumanBeingResponseDTO> getAllHuman()
+ Long createHuman(HumanBeingRequestDTO)
+ void deleteHumanById(Long)
+ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
+ String info()
+ void clear()
+ void save(String)
+ HumanBeingResponseDTO max_by_impact_speed()
+ List<HumanBeingResponseDTO> print_ascending()
+ Long addIfMax(HumanBeingRequestDTO)
+ Long addIfMin(HumanBeingRequestDTO)
+ int countByMood(Mood)
+ boolean isImpactSpeedMax(HumanBeingRequestDTO)
+ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
interface server.services.HumanService {
~ HumanBeingResponseDTO getHumanById(Long)
~ List<HumanBeingResponseDTO> getAllHuman()
~ Long createHuman(HumanBeingRequestDTO)
~ void deleteHumanById(Long)
~ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
~ String help()
~ String info()
~ void clear()
~ void save(String)
~ HumanBeingResponseDTO max_by_impact_speed()
~ List<HumanBeingResponseDTO> print_ascending()
~ Long addIfMax(HumanBeingRequestDTO)
~ Long addIfMin(HumanBeingRequestDTO)
~ int countByMood(Mood)
~ boolean isImpactSpeedMax(HumanBeingRequestDTO)
~ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
class client.ui.ConsoleColors {
+ {static} String RESET
+ {static} String BLACK
+ {static} String RED
+ {static} String GREEN
+ {static} String YELLOW
+ {static} String BLUE
+ {static} String PURPLE
+ {static} String CYAN
+ {static} String WHITE
+ {static} String BLACK_BOLD
+ {static} String RED_BOLD
+ {static} String GREEN_BOLD
+ {static} String YELLOW_BOLD
+ {static} String BLUE_BOLD
+ {static} String PURPLE_BOLD
+ {static} String CYAN_BOLD
+ {static} String WHITE_BOLD
+ {static} String BLACK_UNDERLINED
+ {static} String RED_UNDERLINED
+ {static} String GREEN_UNDERLINED
+ {static} String YELLOW_UNDERLINED
+ {static} String BLUE_UNDERLINED
+ {static} String PURPLE_UNDERLINED
+ {static} String CYAN_UNDERLINED
+ {static} String WHITE_UNDERLINED
+ {static} String BLACK_BACKGROUND
+ {static} String RED_BACKGROUND
+ {static} String GREEN_BACKGROUND
+ {static} String YELLOW_BACKGROUND
+ {static} String BLUE_BACKGROUND
+ {static} String PURPLE_BACKGROUND
+ {static} String CYAN_BACKGROUND
+ {static} String WHITE_BACKGROUND
+ {static} String BLACK_BRIGHT
+ {static} String RED_BRIGHT
+ {static} String GREEN_BRIGHT
+ {static} String YELLOW_BRIGHT
+ {static} String BLUE_BRIGHT
+ {static} String PURPLE_BRIGHT
+ {static} String CYAN_BRIGHT
+ {static} String WHITE_BRIGHT
+ {static} String BLACK_BOLD_BRIGHT
+ {static} String RED_BOLD_BRIGHT
+ {static} String GREEN_BOLD_BRIGHT
+ {static} String YELLOW_BOLD_BRIGHT
+ {static} String BLUE_BOLD_BRIGHT
+ {static} String PURPLE_BOLD_BRIGHT
+ {static} String CYAN_BOLD_BRIGHT
+ {static} String WHITE_BOLD_BRIGHT
+ {static} String BLACK_BACKGROUND_BRIGHT
+ {static} String RED_BACKGROUND_BRIGHT
+ {static} String GREEN_BACKGROUND_BRIGHT
+ {static} String YELLOW_BACKGROUND_BRIGHT
+ {static} String BLUE_BACKGROUND_BRIGHT
+ {static} String PURPLE_BACKGROUND_BRIGHT
+ {static} String CYAN_BACKGROUND_BRIGHT
+ {static} String WHITE_BACKGROUND_BRIGHT
+ {static} String success(String)
+ {static} String unsuccess(String)
+ {static} String error(String)
+ {static} String whiteStr(String)
}
class server.services.builders.WeaponTypeSetter {
+ {static} WeaponType getWeaponType(BufferedReader)
+ {static} WeaponType setWeaponType(BufferedReader,BufferedReader,BuilderType)
}
class server.services.HumanServiceImpl {
- HumanDao humanDao
+ HumanBeingResponseDTO getHumanById(Long)
+ List<HumanBeingResponseDTO> getAllHuman()
+ Long createHuman(HumanBeingRequestDTO)
+ void deleteHumanById(Long)
+ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
+ String help()
+ String info()
+ void clear()
+ void save(String)
+ HumanBeingResponseDTO max_by_impact_speed()
+ List<HumanBeingResponseDTO> print_ascending()
+ Long addIfMax(HumanBeingRequestDTO)
+ Long addIfMin(HumanBeingRequestDTO)
+ int countByMood(Mood)
+ boolean isImpactSpeedMax(HumanBeingRequestDTO)
+ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
interface server.controller.HumanController {
~ HumanBeingResponseDTO getHumanById(Long)
~ List<HumanBeingResponseDTO> getAllHuman()
~ Long createHuman(HumanBeingRequestDTO)
~ void deleteHumanById(Long)
~ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
~ String help()
~ String info()
~ void clear()
~ void save(String)
~ HumanBeingResponseDTO max_by_impact_speed()
~ List<HumanBeingResponseDTO> print_ascending()
~ Long addIfMax(HumanBeingRequestDTO)
~ Long addIfMin(HumanBeingRequestDTO)
~ int countByMood(String)
~ boolean isImpactSpeedMax(HumanBeingRequestDTO)
~ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
class server.exception.ArgumentException {
}
class server.services.CommandExecutor {
- HumanController controller
- HistoryManager history
- String file
- BufferedReader reader
- List<String> scriptHistory
- void checkCommandArg(String,int)
- void executeScript(String,BufferedReader)
+ void executeCommand(String,BufferedReader,BufferedReader,BuilderType)
- boolean isImpactSpeedMax(HumanBeingRequestDTO)
- boolean isImpactSpeedMin(HumanBeingRequestDTO)
- String tildaResolver(String)
}
class server.controller.HumanControllerImpl {
- HumanService service
+ HumanBeingResponseDTO getHumanById(Long)
+ List<HumanBeingResponseDTO> getAllHuman()
+ Long createHuman(HumanBeingRequestDTO)
+ void deleteHumanById(Long)
+ HumanBeingResponseDTO updateHuman(HumanBeingRequestDTO,Long)
+ String help()
+ String info()
+ void clear()
+ void save(String)
+ HumanBeingResponseDTO max_by_impact_speed()
+ List<HumanBeingResponseDTO> print_ascending()
+ Long addIfMax(HumanBeingRequestDTO)
+ Long addIfMin(HumanBeingRequestDTO)
+ int countByMood(String)
+ boolean isImpactSpeedMax(HumanBeingRequestDTO)
+ boolean isImpactSpeedMin(HumanBeingRequestDTO)
}
class util.DateParser {
+ {static} ZonedDateTime zoneDateTimeFromString(String)
}


server.exception.RuntimeException <|-- server.exception.ApplicationException
server.exception.RuntimeException <|-- server.exception.FileException
server.exception.RuntimeException <|-- server.exception.ValidationException
server.exception.RuntimeException <|-- server.exception.CommandException
server.dao.HumanDao <|.. server.dao.HumanDaoImpl
server.services.HumanService <|.. server.services.HumanServiceImpl
server.exception.RuntimeException <|-- server.exception.ArgumentException
server.controller.HumanController <|.. server.controller.HumanControllerImpl
@enduml